{"version":3,"sources":["components/BannerImage.js","components/PhotoEntry.js","components/AlbumMaker.js","App.js","serviceWorker.js","index.js"],"names":["BannerImage","className","src","alt","PhotoEntry","image_path","this","props","href","caption","location","React","Component","AlbumMaker","entries","itemlist","map","photo","key","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6wBAYeA,MATf,WAEE,OACE,6BACE,yBAAKC,UAAU,SAASC,IAAI,sBAAsBC,IAAI,e,4BCkB7CC,E,uKAbX,IAAMC,EAAa,YAAcC,KAAKC,MAAML,IAE5C,OAAO,yBAAKD,UAAU,qBACZ,uBAAGO,KAAMH,GACN,yBAAKJ,UAAU,YAAYC,IAAKG,EAAYF,IAAKG,KAAKC,MAAME,WAE/D,4BAAKH,KAAKC,MAAME,SAChB,4BAAKH,KAAKC,MAAMG,e,GAhBLC,IAAMC,W,OCqBhBC,E,uKAhBX,OACE,yBAAKZ,UAAU,kBAEba,EAAQC,SAASC,KAAI,SAACC,GACpB,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAMf,IAAKA,IAAKe,EAAMf,IAAKQ,SAAUO,EAAMP,SAAUD,QAASQ,EAAMR,kB,GAR7EE,IAAMC,WCgBhBO,MAff,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,6BACE,sDACA,4CACA,kBAAC,EAAD,UCDUmB,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.632c19f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './master.css';\r\n\r\nfunction BannerImage(){\r\n\r\n  return (\r\n    <div>\r\n      <img className=\"banner\" src=\"./images/banner.jpg\" alt=\"Banner 1\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BannerImage;\r\n","import React from 'react';\nimport './master.css';\n\nclass PhotoEntry extends React.Component {\n\n  render() {\n\n    // console.log(\"this.props.caption = \" + this.props.caption);\n    // console.log(\"this.props.location = \" + this.props.location);\n    // console.log(\"this.props.src = \" + this.props.src);\n    // console.log(\"-------------------------------\");\n\n    const image_path = \"./images/\" + this.props.src;\n\n    return <div className=\"photo-entry-block\" >\n              <a href={image_path}>\n                 <img className=\"photo-img\" src={image_path} alt={this.props.caption} />\n              </a>\n              <h5>{this.props.caption}</h5>\n              <h6>{this.props.location}</h6>\n           </div>\n  }\n\n}\n\nexport default PhotoEntry;\n","import React from 'react';\nimport PhotoEntry from './PhotoEntry';\nimport entries from './data/photo-entries';\n\nclass AlbumMaker extends React.Component {\n\n  render() {\n\n    return (\n      <div className=\"flex-container\">\n      {\n        entries.itemlist.map((photo) => {\n          return <PhotoEntry key={photo.src} src={photo.src} location={photo.location} caption={photo.caption} /> }\n        )\n      }\n        {/*<PhotoEntry src=\"berlin.jpg\" location=\"Berlin, Germany\" caption=\"Heart of Europe\" /> */}\n\n      </div>\n    )\n\n  }\n\n}\n\nexport default AlbumMaker;\n","import React from 'react';\nimport './App.css';\nimport BannerImage from  './components/BannerImage';\nimport AlbumMaker from './components/AlbumMaker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BannerImage />\n        <div>\n          <h1>Welcome to my Catalogs</h1>\n          <h3>RomApps Â©</h3>\n          <AlbumMaker />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}